/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { playAnimation } from '../../utils/utils'
import { LoopRepeat } from 'three'


const modelDir = '/models/blackhole/BlackHole.gltf'

export default function Blackhole({ ...props }) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF(modelDir)
  const { actions } = useAnimations(animations, group)
  
  useEffect(() => {
    console.log(actions);
    console.log(actions.animation_0);
    playAnimation(actions.animation_0)
    actions.animation_0.setLoop(LoopRepeat)
    actions.animation_0.setDuration(1)
    actions.animation_0.play()
  })
  return (
    <group position={[0, 3, 0]} scale={0.003} ref={group} {...props} dispose={null}>
      <group>
        <group name="Black_Hole">
          <group name="Disks_(animated)" position={[0, -0.5, 0]} rotation={[0, 0.24, 0]}>
            <mesh name="Disk_(illuminance)_" castShadow receiveShadow geometry={nodes['Disk_(illuminance)_'].geometry} material={materials.illuminance} position={[0, 0.5, 0]} rotation={[0, 0.41, 0]} />
            <mesh name="Disk1_(illuminance1)" castShadow receiveShadow geometry={nodes['Disk1_(illuminance1)'].geometry} material={materials['illuminance.1']} position={[0, -0.5, 0]} />
          </group>
          <mesh name="Torus_(refraction)" castShadow receiveShadow geometry={nodes['Torus_(refraction)'].geometry} material={materials.refractio} />
          <mesh name="Sphere_(black)" castShadow receiveShadow geometry={nodes['Sphere_(black)'].geometry} material={materials.black} />
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(modelDir)
